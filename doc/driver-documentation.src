*

NAME dbd_register_plugin
	PROTO void dbd_register_plugin(const dbi_info_t **_plugin_info, const char ***_custom_functions, const char ***_reserved_words)
	DESC
	This is the first function called after the plugin module is loaded into memory. It passes back meta-information back to libdbi through the pointers passed as arguments.	
	ENDDESC
	ARG _plugin_info A pointer used to link to the plugin's information struct.
	ARG _custom_functions A pointer used to link to the plugin's string array of custom database-specific functions.
	ARG _reserved_words A pointer used to link to the plugin's string array of reserved words.
	RET 

*

NAME dbd_initialize
	PROTO int dbd_initialize(dbi_plugin_t *plugin)
	DESC
	Performs any database-specific server initialization. This is called right after dbd_register_plugin().
	ENDDESC
	ARG plugin The plugin's pointer.
	RET -1 on error, 0 on success. If -1 is returned, the plugin will not be added to the list of available plugins.

*

NAME dbd_connect
	PROTO int dbd_connect(dbi_driver_t *driver)
	DESC
	Connects to the database, setting the driver's DB-specific connection handle and current database name. Connection parameters are already filled through the driver's option settings. The standard options that all plugins must recognize (if applicable) are: host, username, password, dbname, and port. Any plugin-specific functions must be prefixed with the name of the plugin and an underscore, such as "mysql_compression".
	ENDDESC
	ARG driver The target driver instance of the plugin.
	RET -1 on error, 0 on success.

*

NAME dbd_disconnect
	PROTO int dbd_disconnect(dbi_driver_t *driver)
	DESC
	Disconnects from the database server.
	ENDDESC
	ARG driver 
	RET -1 on error, 0 on success.

*

NAME dbd_fetch_row
	PROTO int dbd_fetch_row(dbi_result_t *result, unsigned int rownum)
	DESC
	
	ENDDESC
	ARG result 
	ARG rownum 
	RET 

*

NAME dbd_free_query
	PROTO int dbd_free_query(dbi_result_t *result)
	DESC
	
	ENDDESC
	ARG result 
	RET 

*

NAME dbd_goto_row
	PROTO int dbd_goto_row(dbi_result_t *result, unsigned int row)
	DESC
	
	ENDDESC
	ARG result 
	ARG row 
	RET 

*

NAME dbd_list_dbs
	PROTO dbi_result_t *dbd_list_dbs(dbi_driver_t *driver)
	DESC
	
	ENDDESC
	ARG driver 
	RET 

*

NAME dbd_list_tables
	PROTO dbi_result_t *dbd_list_tables(dbi_driver_t *driver, const char *db)
	DESC
	
	ENDDESC
	ARG driver 
	ARG db 
	RET 

*

NAME dbd_query
	PROTO dbi_result_t *dbd_query(dbi_driver_t *driver, const char *statement)
	DESC
	
	ENDDESC
	ARG driver 
	ARG statement 
	RET 

*

NAME dbd_quote_string
	PROTO int dbd_quote_string(dbi_plugin_t *plugin, const char *orig, char *dest)
	DESC
	Given a string, wrap quotes around that string and escape any characters that the database server needs escaped.
	ENDDESC
	ARG plugin A pointer to the plugin itself, which may be useful in weird cases.
	ARG orig The string to quote and escape.
	ARG dest The destination for the new string, which is already allocated as (strlen(orig)*2)+4+1. In the worst case, each character will need to be escaped, with two quote characters at both the beginning and end of the string, plus one for the terminating NULL.
	RET 

*

NAME dbd_select_db
	PROTO char *dbd_select_db(dbi_driver_t *driver, const char *db)
	DESC
	
	ENDDESC
	ARG driver 
	ARG db 
	RET 

*

NAME dbd_geterror
	PROTO int dbd_geterror(dbi_driver_t *driver, int *errno, char **errstr)
	DESC
	Retrieves and stores error information, in numeric and/or string format.
	ENDDESC
	ARG driver The target driver.
	ARG errno The int variable to hold the error number.
	ARG errstr The string to hold the error description.
	RET 0 if there was an error, 1 if errno was filled, 2 if errstr was filled, 3 if both errno and errstr were filled.

*

NAME _dbd_result_create
	PROTO dbi_result_t *_dbd_result_create(dbi_driver_t *driver, void *handle, unsigned int numrows_matched, unsigned int numrows_affected)
	DESC
	
	ENDDESC
	ARG driver 
	ARG handle 
	ARG numrows_matched 
	ARG numrows_affected 
	RET 

*

NAME _dbd_result_set_numfields
	PROTO void _dbd_result_set_numfields(dbi_result_t *result, unsigned int numfields)
	DESC
	
	ENDDESC
	ARG result 
	ARG numfields 
	RET 

*

NAME _dbd_result_add_field
	PROTO void _dbd_result_add_field(dbi_result_t *result, unsigned int idx, char *name, unsigned short type, unsigned int attribs)
	DESC
	
	ENDDESC
	ARG result 
	ARG idx 
	ARG name 
	ARG type 
	ARG attribs 
	RET 

*

NAME _dbd_row_allocate
	PROTO dbi_row_t *_dbd_row_allocate(unsigned int numfields)
	DESC
	
	ENDDESC
	ARG numfields 
	RET 

*

NAME _dbd_row_finalize
	PROTO void _dbd_row_finalize(dbi_result_t *result, dbi_row_t *row, unsigned int idx)
	DESC
	
	ENDDESC
	ARG result 
	ARG row 
	ARG idx 
	RET 

