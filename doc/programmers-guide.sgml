<!DOCTYPE Book PUBLIC "-//OASIS//DTD DocBook V3.1//EN" [

<!ENTITY libdbi-reference SYSTEM "libdbi-reference.sgml">
<!ENTITY example-program SYSTEM "example-program.sgml">
<!ENTITY freedoc-license SYSTEM "include/copying-fdl.sgml">
<!ENTITY www '<ULink url="http://libdbi.sourceforge.net">http://libdbi.sourceforge.net</ULink>'>

]>

<Book id="programmers-guide">

<BookInfo>
	<Title>Database Independent Abstraction Layer for C</Title>
	<SubTitle>libdbi Developer's Guide</SubTitle>
	<Author>
		<Firstname>David</Firstname>
		<Othername>A.</Othername>
		<Surname>Parker</Surname>
		<Affiliation>
			<OrgName>Neon Goat Productions</OrgName>
			<Address><EMail>david@neongoat.com</EMail></Address>
		</Affiliation>
	</Author>
	<Edition>Document revision: $Id: programmers-guide.sgml,v 1.3 2001/06/19 06:27:41 dap24 Exp $</Edition>
	<PubDate>June 11, 2001</PubDate>
	<Copyright>
		<Year>2001</Year>
		<Holder>David Parker, Neon Goat Productions</Holder>
	</Copyright>
	<LegalNotice>
		<Para>
			Permission is granted to copy, distribute and/or modify this
			document under the terms of the <Link linkend="copying-FDL">
			<CiteTitle>GNU Free Documentation License</CiteTitle></Link>,
			Version 1.1 or any later version published by the Free Software
			Foundation; with no Invariant Sections, with no	Front-Cover Texts,
			and with no Back-Cover Texts.  A copy of the license is included in
			<XRef linkend="copying-FDL">.
		</Para>
	</LegalNotice>
	<Abstract>
	<Para>
		libdbi implements a database-independent abstraction layer in C,
		similar to the DBI/DBD layer in Perl. Writing one generic set of code,
		programmers can leverage the power of multiple databases and multiple
		simultaneous database connections by using this framework.
	</Para>
	</Abstract>
</BookInfo>

<Chapter id="intro"><Title>Introduction</Title>
	<Section id="description"><Title>Description</Title>
		<Para>
			libdbi provides application developers with a database independent abstraction
			layer for C. It handles the database-specific implementations for each type of
			database, so that you can use the same exact code with any type of database server
			that libdbi supports. You can initiate and use multiple database connections
			simultaneously, regardless of the types of database servers you are connecting to.
			The plugin architecture allows for new database drivers to be easily added
			dynamically by a third party.
		</Para>
	</Section>
	<Section id="terminology"><Title>libdbi Concepts and Terminology</Title>
		<Para>
			In this guide, the terms <Quote>user</Quote> and <Quote>programmer</Quote> are used
			interchangably, since the target audience is the software developer using libdbi in
			his program. The libdbi architecture provides serveral <Quote>plugins</Quote>, one
			for each type of database server. All plugins are loaded into memory upon libdbi
			initiallization and made available to the programmer. Once a plugin is
			<Emphasis>instantiated</Emphasis>, it represents a distinct database session and is
			called a <Quote>driver</Quote>. Multiple drivers may exist for a single plugin, and
			all will function independantly of each other.
		</Para>
	</Section>
	<Section id="gnugpl"><Title>Modifications and redistribution of libdbi</Title>
		<Para>
			libdbi is Copyright &copy; 2001, David Parker and Mark Tobenkin.
		</Para>
		<Para>			
			libdbi is free software; you can redistribute it and/or
			modify it under the terms of the GNU Lesser General Public
			License as published by the Free Software Foundation; either
			version 2.1 of the License, or (at your option) any later version.
		</Para>
		<Para>
			This library is distributed in the hope that it will be useful,
			but WITHOUT ANY WARRANTY; without even the implied warranty of
			MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
			Lesser General Public License for more details.
		</Para>
		<Para>
			You should have received a copy of the GNU Lesser General Public
			License along with this library; if not, write to the Free Software
			Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA
		</Para>
	</Section>
	<Section id="contact"><Title>Contact Info</Title>
		<Para>
			Please email us with any bugs, ideas, feature requests, or questions. The libdbi
			website has the latest version of this documentation and the libdbi software, as
			well as a central database of third-party plugins.
		</Para>
		<ItemizedList>
			<ListItem><Para>&www;</Para></ListItem>
			<ListItem><Para>David Parker <EMail>david@neongoat.com</EMail></Para></ListItem>
			<ListItem><Para>Mark Tobenkin <EMail>mark@brentwoodradio.com</EMail></Para></ListItem>
		</ItemizedList>
	</Section>
</Chapter>

<Chapter id="quickstart"><Title>libdbi in a Nutshell (Quickstart Guide)</Title>
	<Section id="quickstart-debriefing"><Title>Quick Overview</Title>
		<Para>
			libdbi uses a plugin system that allows various databases to be
			supported simultaneously, and can dynamically load or unload
			plugins that are supplied by libdbi or a third-party. The library
			is initiallized by calling <Literal><XRef
			linkend="dbi-initialize"></Literal> and a plugin instance (a
			driver) is started by calling either <Literal><XRef
			linkend="dbi-load-driver"></Literal> or both <Literal><XRef
			linkend="dbi-open-plugin"></Literal> and <Literal><XRef
			linkend="dbi-start-driver"></Literal>. The driver's options
			such as username, password, hostname, and database name are set
			with <Literal><XRef linkend="dbi-set-option"></Literal> and
			<Literal><XRef linkend="dbi-set-option-numeric"></Literal>.
			Once all options are set, <Literal><XRef
			linkend="dbi-connect"></Literal> will connect to the
			database (returning -1 in case of an error), waiting to handle a
			<Literal><XRef linkend="dbi-query"></Literal>. After a
			successful query, <Literal><XRef
			linkend="dbi-fetch-row"></Literal> will retrieve the next
			matched row, which can be passed on to one of the field-fetching
			functions: <Literal><XRef linkend="dbi-get-char"></Literal>,
			<Literal><XRef linkend="dbi-get-short">dbi_get_short</Literal>,
			<Literal><XRef linkend="dbi-get-long"></Literal>,
			<Literal><XRef linkend="dbi-get-longlong"></Literal>,
			<Literal><XRef linkend="dbi-get-uchar"></Literal>
			(unsigned), <Literal><XRef
			linkend="dbi-get-ushort"></Literal> (unsigned),
			<Literal><XRef linkend="dbi-get-ulong"></Literal>
			(unsigned), <Literal><XRef
			linkend="dbi-get-ulonglong"></Literal> (unsigned),
			<Literal><XRef linkend="dbi-get-float"></Literal>,
			<Literal><XRef linkend="dbi-get-double"></Literal>,
			<Literal><XRef linkend="dbi-get-string"></Literal>,
			<Literal><XRef linkend="dbi-get-binary"></Literal>,
			<Literal><XRef linkend="dbi-get-string-copy"></Literal>,
			<Literal><XRef linkend="dbi-get-binary-copy"></Literal>,
			<Literal><XRef linkend="dbi-get-enum"></Literal>, or
			<Literal><XRef linkend="dbi-get-set"></Literal>. When using
			the string or binary functions, the programmer must not modify the
			returned data, since it is managed by libdbi and may be
			inaccessible after the next fetched row. If the data must be
			modified or must be managed by the program itself, <Literal><XRef
			linkend="dbi-get-string-copy"></Literal> and <Literal><XRef
			linkend="dbi-get-binary-copy"></Literal> will return a copy of the
			data for the program to use.  Memory allocated by these two
			functions must be manually freed by the program. For string and
			binary fields, <Literal><XRef
			linkend="dbi-get-length"></Literal> will return the length
			in characters of a particular field. For other types of fields,
			<Literal><XRef linkend="dbi-get-size"></Literal> will return
			the size in bytes of a particular field's type. Before the next
			database operation is performed, <Literal><XRef
			linkend="dbi-free-query"></Literal> must be called to free
			internal variables.  Before the program terminates, the driver must
			be disconnected and unloaded with <Literal><XRef
			linkend="dbi-close-driver"></Literal> and libdbi must be
			unloaded with <Literal><XRef
			linkend="dbi-shutdown"></Literal>.
		</Para>
		<Para>
			As an alternative to calling the dbi_get_TYPENAME functions after
			every fetched row, you can also <Quote>bind</Quote> variables to
			database fields so that libdbi updates the variables automatically.
			Any desired bindings must be set before <Literal><XRef
			linkend="dbi-fetch-row"></Literal> is called. To unbind a
			field, specify <Literal>NULL</Literal> as the destination
			variable's pointer.
		</Para>
		<Para>
			[description of error handling scheme goes here]
		</Para>
	</Section> <!-- put section with example code here, explain error handling? -->
	<Section id="quickstart-code"><Title>Generic Example Program</Title>
		&example-program;
	</Section>
</Chapter>

&libdbi-reference;
&freedoc-license;

</Book>
